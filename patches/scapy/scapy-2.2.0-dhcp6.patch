--- a/scapy/layers/dhcp6.py	2012-12-30 11:20:17.000000000 +0100
+++ b/scapy/layers/dhcp6.py	2016-11-09 17:54:53.656076238 +0100
@@ -33,6 +33,7 @@
 
 All_DHCP_Relay_Agents_and_Servers = "ff02::1:2" 
 All_DHCP_Servers = "ff05::1:3"  # Site-Local scope : deprecated by 3879
+				# RFC3879 deprecated just unicast site-local
 
 dhcp6opts = { 1: "CLIENTID",  
               2: "SERVERID",
@@ -70,7 +71,18 @@
              36: "OPTION_GEOCONF_CIVIC",             #RFC-ietf-geopriv-dhcp-civil-09.txt
              37: "OPTION_REMOTE_ID",                 #RFC4649
              38: "OPTION_SUBSCRIBER_ID",             #RFC4580
-             39: "OPTION_CLIENT_FQDN" }              #RFC4704
+             39: "OPTION_CLIENT_FQDN",               #RFC4704
+	          40: "OPTION_PANA_AGENT",		          #RFC5192
+	          41: "OPTION_NEW_POSIX_TIMEZONE",	      #RFC4833
+	          42: "OPTION_NEW_TZDB_TIMEZONE",	      #RFC4833
+	          48: "OPTION_LQ_CLIENT_LINK",	          #RFC5007
+	          59: "OPT_BOOTFILE_URL",		          #RFC5970
+	          60: "OPT_BOOTFILE_PARAM",		          #RFC5970
+	          61: "OPTION_CLIENT_ARCH_TYPE",	      #RFC5970
+	          62: "OPTION_NII",			              #RFC5970
+	          65: "OPTION_ERP_LOCAL_DOMAIN_NAME",     #RFC6440
+             66: "OPTION_RELAY_SUPPLIED_OPTIONS",    #RFC6422
+             79: "OPTION_CLIENT_LINKLAYER_ADDR"}     #RFC6939
 
 dhcp6opts_by_code = {  1: "DHCP6OptClientId", 
                        2: "DHCP6OptServerId",
@@ -109,15 +121,22 @@
                        37: "DHCP6OptRemoteID",            #RFC4649
                        38: "DHCP6OptSubscriberID",        #RFC4580
                        39: "DHCP6OptClientFQDN",          #RFC4704
-                       #40: "DHCP6OptPANAAgent",          #RFC-ietf-dhc-paa-option-05.txt
-                       #41: "DHCP6OptNewPOSIXTimeZone,    #RFC4833
-                       #42: "DHCP6OptNewTZDBTimeZone,     #RFC4833
-                       43: "DHCP6OptRelayAgentERO"        #RFC4994
+                       40: "DHCP6OptPanaAuthAgent",       #RFC-ietf-dhc-paa-option-05.txt
+                       41: "DHCP6OptNewPOSIXTimeZone",    #RFC4833
+                       42: "DHCP6OptNewTZDBTimeZone",     #RFC4833
+                       43: "DHCP6OptRelayAgentERO",       #RFC4994
                        #44: "DHCP6OptLQQuery",            #RFC5007
                        #45: "DHCP6OptLQClientData",       #RFC5007
                        #46: "DHCP6OptLQClientTime",       #RFC5007
                        #47: "DHCP6OptLQRelayData",        #RFC5007
-                       #48: "DHCP6OptLQClientLink",       #RFC5007
+                       48: "DHCP6OptLQClientLink",        #RFC5007
+		                59: "DHCP6OptBootFileUrl",	       #RFC5790
+		                60: "DHCP6OptBootFileParam",	   #RFC5970
+		                61: "DHCP6OptClientArchType",	   #RFC5970
+		                62: "DHCP6OptClientNetworkInterId",#RFC5970
+		                65: "DHCP6OptERPDomain",		   #RFC6440
+                       66: "DHCP6OptRelaySuppliedOpt",    #RFC6422
+                       79: "DHCP6OptClientLinkLayerAddr"
 }
 
 
@@ -242,7 +261,7 @@
 
 class _DHCP6OptGuessPayload(Packet):
     def guess_payload_class(self, payload):
-        cls = conf.raw_layer
+        cls = Raw
         if len(payload) > 2 :
             opt = struct.unpack("!H", payload[:2])[0]
             cls = get_cls(dhcp6opts_by_code.get(opt, "DHCP6OptUnknown"), DHCP6OptUnknown)
@@ -265,10 +284,10 @@
         return str(i)
 
     def m2i(self, pkt, x):
-        cls = conf.raw_layer
+        cls = Raw 
         if len(x) > 4:
             o = struct.unpack("!H", x[:2])[0]
-            cls = get_cls(duid_cls.get(o, conf.raw_layer), conf.raw_layer)
+            cls = get_cls(duid_cls.get(o, Raw), "Raw")
         return cls(x)
 
     def getfield(self, pkt, s):
@@ -296,14 +315,13 @@
     fields_desc = [ ShortEnumField("optcode", 5, dhcp6opts), 
                     FieldLenField("optlen", None, length_of="iaaddropts",
                                   fmt="!H", adjust = lambda pkt,x: x+24),
-                    IP6Field("addr", "::"),
+                    IP6Field("address", "::"),
                     IntField("preflft", 0),
                     IntField("validlft", 0),
-                    XIntField("iaid", None),
                     StrLenField("iaaddropts", "",
                                 length_from  = lambda pkt: pkt.optlen - 24) ]
     def guess_payload_class(self, payload):
-        return conf.padding_layer
+        return Padding
 
 class _IANAOptField(PacketListField):
     def i2len(self, pkt, z):
@@ -317,8 +335,8 @@
         remain, payl = s[:l], s[l:]
         while len(remain)>0:
             p = self.m2i(pkt,remain)
-            if conf.padding_layer in p:
-                pad = p[conf.padding_layer]
+            if Padding in p:
+                pad = p[Padding]
                 remain = pad.load
                 del(pad.underlayer.payload)
             else:
@@ -334,7 +352,7 @@
                     XIntField("iaid", None),
                     IntField("T1", None),
                     IntField("T2", None),
-                    _IANAOptField("ianaopts", [], DHCP6OptIAAddress,
+                    _IANAOptField("ianaopts", [], _DHCP6OptGuessPayload,
                                   length_from = lambda pkt: pkt.optlen-12) ]
 
 class _IATAOptField(_IANAOptField):
@@ -346,7 +364,7 @@
                     FieldLenField("optlen", None, length_of="iataopts",
                                   fmt="!H", adjust = lambda pkt,x: x+4),
                     XIntField("iaid", None),
-                    _IATAOptField("iataopts", [], DHCP6OptIAAddress,
+                    _IATAOptField("iataopts", [], _DHCP6OptGuessPayload,
                                   length_from = lambda pkt: pkt.optlen-4) ]
 
 
@@ -430,12 +448,17 @@
     name = "DHCP6 Relay Message Option"
     fields_desc = [ ShortEnumField("optcode", 9, dhcp6opts), 
                     ShortField("optlen", None ) ]
+#    def guess_payload_class(self, payload):
+#        return Padding
+
     def post_build(self, p, pay):
         if self.optlen is None:
             l = len(pay) 
             p = p[:2]+struct.pack("!H", l)
         return p + pay
 
+   # def guess_payload_class(self, payload):
+   #     return Padding
 
 #### DHCPv6 Authentication Option ###################################
 
@@ -545,8 +568,8 @@
         remain, payl = s[:l], s[l:]
         while len(remain)>0:
             p = self.m2i(pkt,remain)
-            if conf.padding_layer in p:
-                pad = p[conf.padding_layer]
+            if Padding in p:
+                pad = p[Padding]
                 remain = pad.load
                 del(pad.underlayer.payload)
             else:
@@ -561,7 +584,7 @@
                     StrLenField("data", "",
                                 length_from = lambda pkt: pkt.len) ]
     def guess_payload_class(self, payload):
-        return conf.padding_layer
+        return Padding
 
 class DHCP6OptUserClass(_DHCP6OptGuessPayload):# RFC sect 22.15
     name = "DHCP6 User Class Option"
@@ -598,7 +621,7 @@
                     StrLenField("optdata", "",
                                 length_from = lambda pkt: pkt.optlen) ]
     def guess_payload_class(self, payload):
-        return conf.padding_layer
+        return Padding
 
 # The third one that will be used for nothing interesting
 class DHCP6OptVendorSpecificInfo(_DHCP6OptGuessPayload):# RFC sect 22.17
@@ -617,8 +640,7 @@
 class DHCP6OptIfaceId(_DHCP6OptGuessPayload):# RFC sect 22.18
     name = "DHCP6 Interface-Id Option"
     fields_desc = [ ShortEnumField("optcode", 18, dhcp6opts),
-                    FieldLenField("optlen", None, fmt="!H",
-                                  length_of="ifaceid"),
+                    FieldLenField("optlen", None, fmt="!H", length_of="ifaceid" ),
                     StrLenField("ifaceid", "",
                                 length_from = lambda pkt: pkt.optlen) ]
 
@@ -716,23 +738,28 @@
     name = "DHCP6 Option - IA_PD Prefix option"
     fields_desc = [ ShortEnumField("optcode", 26, dhcp6opts),
                     FieldLenField("optlen", None, length_of="iaprefopts",
-                                  adjust = lambda pkt,x: x+26),
+                                  adjust = lambda pkt,x: x+25),
                     IntField("preflft", 0),
                     IntField("validlft", 0),
-                    ByteField("plen", 48),  # TODO: Challenge that default value
-                    IP6Field("prefix", "2001:db8::"), # At least, global and won't hurt
+                    ByteField("plen", 0),  # TODO: Challenge that default value
+                    IP6Field("prefix", "::"), # At least, global and won't hurt
                     StrLenField("iaprefopts", "",
-                                length_from = lambda pkt: pkt.optlen-26) ]
+                                length_from = lambda pkt: pkt.optlen-25) ]
+    def guess_payload_class(self, payload):
+        return Padding
+
+class _IAPDOptField(_IANAOptField):	
+	pass
 
 class DHCP6OptIA_PD(_DHCP6OptGuessPayload):                       #RFC3633
     name = "DHCP6 Option - Identity Association for Prefix Delegation"
     fields_desc = [ ShortEnumField("optcode", 25, dhcp6opts),
                     FieldLenField("optlen", None, length_of="iapdopt",
-                                  adjust = lambda pkt,x: x+12),
-                    IntField("iaid", 0),
-                    IntField("T1", 0),
-                    IntField("T2", 0),
-                    PacketListField("iapdopt", [], DHCP6OptIAPrefix,
+                                  fmt="!H", adjust = lambda pkt,x: x+12),
+                    IntField("iaid", None),
+                    IntField("T1", None),
+                    IntField("T2", None),
+                    _IAPDOptField("iapdopt", [],_DHCP6OptGuessPayload,
                                     length_from = lambda pkt: pkt.optlen-12) ]
 
 class DHCP6OptNISServers(_DHCP6OptGuessPayload):                 #RFC3898
@@ -866,6 +893,90 @@
                     _OptReqListField("reqopts", [23, 24],
                                      length_from = lambda pkt: pkt.optlen) ]
 
+class DHCP6OptClientLinkLayerAddr(_DHCP6OptGuessPayload):       # RFC6936
+    name = "DHCP6 Client Link-Layer Address Option"
+    fields_desc = [ ShortEnumField("optcode", 79, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="lladdr",
+                                  adjust = lambda pkt,x: x+2),
+		    ShortField("address_type", 1),
+		    _LLAddrField("lladdr", "::") ]
+
+class DHCP6OptPanaAuthAgent(_DHCP6OptGuessPayload):	# RFC5192
+    name = "DHCP6 PANA Authentication Agent Option"
+    fields_desc = [ ShortEnumField("optcode", 40, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="paaaddr"),
+                    IP6ListField("paaaddr", [],
+                                 length_from= lambda pkt: pkt.optlen) ]
+
+class DHCP6OptNewPOSIXTimeZone(_DHCP6OptGuessPayload):               #RFC4833
+    name = "DHCP6 POSIX Timezone Option"
+    fields_desc = [ ShortEnumField("optcode", 41, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="optdata"),
+                    StrLenField("optdata", "",
+                                length_from = lambda pkt: pkt.optlen) ]
+
+class DHCP6OptNewTZDBTimeZone(_DHCP6OptGuessPayload):               #RFC4833
+    name = "DHCP6 TZDB Timezone Option"
+    fields_desc = [ ShortEnumField("optcode", 42, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="optdata"),
+                    StrLenField("optdata", "",
+                                length_from = lambda pkt: pkt.optlen) ]
+
+class DHCP6OptLQClientLink(_DHCP6OptGuessPayload):     # RFC5007
+    name = "DHCP6 Client Link Option"
+    fields_desc = [ ShortEnumField("optcode", 48, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="link-address"),
+                    IP6ListField("link-address", [],
+                                 length_from= lambda pkt: pkt.optlen) ]
+
+class DHCP6OptBootFileUrl(_DHCP6OptGuessPayload):               #RFC5970
+    name = "DHCP6 Boot File URL Option"
+    fields_desc = [ ShortEnumField("optcode", 59, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="optdata"),
+                    StrLenField("optdata", "",
+                                length_from = lambda pkt: pkt.optlen) ]
+
+class DHCP6OptBootFileParam(_DHCP6OptGuessPayload):               #RFC5970
+    name = "DHCP6 Boot File Parameters Option"
+    fields_desc = [ ShortEnumField("optcode", 60, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="optdata"),
+                    StrLenField("optdata", "",
+                                length_from = lambda pkt: pkt.optlen) ]
+
+class DHCP6OptClientArchType(_DHCP6OptGuessPayload):               #RFC5970
+    name = "DHCP6 Client System Architecture Type Option"
+    fields_desc = [ ShortEnumField("optcode", 61, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="archtypes"),
+                    StrLenField("archtypes", "",
+                                length_from = lambda pkt: pkt.optlen) ]
+
+
+class DHCP6OptClientNetworkInterId(_DHCP6OptGuessPayload):               #RFC5970
+    name = "DHCP6 Client Network Interface Identifier Option"
+    fields_desc = [ ShortEnumField("optcode", 62, dhcp6opts),
+                    ShortField("optlen", 3),
+		    ByteField("iitype", 0),
+		    ByteField("iimajor", 0), 
+		    ByteField("iiminor", 0) ]
+
+class DHCP6OptERPDomain(_DHCP6OptGuessPayload):       #RFC6440
+    name = "DHCP6 Option - ERP Domain Name List"
+    fields_desc = [ ShortEnumField("optcode", 65, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="erpdomain"),
+                    DomainNameListField("erpdomain", [],
+                                        length_from = lambda pkt: pkt.optlen) ]
+
+
+#### DHCPv6 Relay-Supplied Options Option #####################################
+
+class DHCP6OptRelaySuppliedOpt(_DHCP6OptGuessPayload):# RFC6422 
+    name = "DHCP6 Relay-Supplied Options Option"
+    fields_desc = [ ShortEnumField("optcode", 66, dhcp6opts),
+                    FieldLenField("optlen", None, length_of="relaysupplied", fmt="!H"),
+                    PacketListField("relaysupplied", [], _DHCP6OptGuessPayload,
+                                          length_from = lambda pkt: pkt.optlen) ]
+
+
 #####################################################################
 ###                        DHCPv6 messages                        ###
 #####################################################################
@@ -898,8 +1009,8 @@
     def guess_payload_class(self, payload):
         if len(payload) > 1 :
             print ord(payload[0])
-            return get_cls(dhcp6opts.get(ord(payload[0]),"DHCP6OptUnknown"), conf.raw_layer)
-        return conf.raw_layer
+            return get_cls(dhcp6opts.get(ord(payload[0]),"DHCP6OptUnknown"), Raw)
+        return Raw
 
 #####################################################################
 ## DHCPv6 messages sent between Clients and Servers (types 1 to 11)
@@ -1057,7 +1168,10 @@
     msgtype = 7
     
     def answers(self, other):
-        return (isinstance(other, DHCP6_InfoRequest) and
+
+        types = (DHCP6_Solicit, DHCP6_InfoRequest, DHCP6_Confirm, DHCP6_Rebind, DHCP6_Decline, DHCP6_Request, DHCP6_Release, DHCP6_Renew)
+
+        return (isinstance(other, types) and
                 self.trid == other.trid)
 
 #####################################################################
@@ -1119,9 +1233,6 @@
     name = "DHCPv6 Information Request Message"    
     msgtype = 11 
     
-    def hashret(self): 
-        return struct.pack("!I", self.trid)[1:3]
-
 #####################################################################
 # sent between Relay Agents and Servers 
 #
@@ -1169,7 +1280,7 @@
         return inet_pton(socket.AF_INET6, self.peeraddr)
     def answers(self, other):
         return (isinstance(other, DHCP6_RelayForward) and
-                self.count == other.count and
+                self.hopcount == other.hopcount and
                 self.linkaddr == other.linkaddr and
                 self.peeraddr == other.peeraddr )
 
@@ -1189,9 +1300,9 @@
                       13: "DHCP6_RelayReply" }
 
 def _dhcp6_dispatcher(x, *args, **kargs):
-    cls = conf.raw_layer
+    cls = Raw
     if len(x) >= 2:
-        cls = get_cls(dhcp6_cls_by_type.get(ord(x[0]), "Raw"), conf.raw_layer)
+        cls = get_cls(dhcp6_cls_by_type.get(ord(x[0]), "Raw"), Raw)
     return cls(x, *args, **kargs)
 
 bind_bottom_up(UDP, _dhcp6_dispatcher, { "dport": 547 } )
